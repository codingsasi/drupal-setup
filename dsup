#!/bin/bash

# Copyright 2015 Abhai Sasidharan <abhai.sasidharan@zyxware.com>
# Copyright 2015 Anish A <anish.a@zyxware.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo -e "Usage: dsup [-u <string>] [-p <string>] [Path/to/database/dump] [database name] [VirtualHost Name] [Link to repo] [optional/path/fo/drupal/installation]" 1>&2;
  echo -e "Example: dsup -u dbusername -p dbpassword /home/abhai/drupal7.tar.gz dbname drupal7.local git@github.com:someone/drupal7.git" 1>&2;
  echo -e "Usage: dsup [-u <string>] [-p <string>] [-v <version>] [database name] [VirtualHost Name] [optional/path/fo/drupal/installation]" 1>&2;
  echo -e "Example: dsup -u dbusername -p dbpassword -v 7 dbname drupal7.local /home/user/Projects/drupal" 1>&2;
  echo -e "Example: dsup -u dbusername -p dbpassword /home/abhai/drupal7.tar.gz dbname drupal7.local git@github.com:someone/drupal7.git" 1>&2;
  echo -e "Usage: dsup [-r <VirtualHost Name>]" 1>&2;
  echo -e "Example: dsup -r drupal.local\n" 1>&2;
  exit 1;
}
create_virtual_host() {
  echo "Creating virtual host..."
  echo -e "<VirtualHost *:80>
      ServerAdmin webmaster@localhost
      ServerName $vhost
      DocumentRoot $PUBLIC_HTML/$vhost
      <Directory $PUBLIC_HTML/$vhost>
    AllowOverride All
    Order allow,deny
    allow from all
    Require all granted
      </Directory>
  </VirtualHost>" > $HOME/"$vhost".conf.temp
  echo $spass | sudo -S mv $HOME/"$vhost".conf.temp /etc/apache2/sites-available/"$vhost".conf
  echo $spass | sudo -S chmod 644 /etc/apache2/sites-available/"$vhost".conf
  echo $spass | sudo -S cp /etc/hosts $HOME/hosts.temp
  echo $spass | sudo -S chmod 777 $HOME/hosts.temp
  echo -e "127.0.0.1  $vhost\n$(cat $HOME/hosts.temp)" > $HOME/hosts.temp
  echo $spass | sudo -S mv $HOME/hosts.temp /etc/hosts
  echo $spass | sudo -S chmod 644 /etc/hosts
  echo $spass | sudo -S a2ensite $vhost
  echo $spass | sudo -S service apache2 restart
}
sudo_password() {
  echo "[sudo] password for $USER:"
  read -s spass
  echo $spass | sudo -S echo hello &> /dev/null
  while ! [ "$(sudo -n echo hello 2>&1)" == "hello" ]; do
    echo "Error [sudo] Re-enter password for $USER:"
    read -s spass
    echo $spass | sudo -S echo hello &> /dev/null
  done
}
write_settings_file() {
  echo $spass | sudo -S cp $INSTALL_LOC/web/sites/default/default.settings.php $INSTALL_LOC/web/sites/default/settings.php
  old="databases = array();"
  new="databases = array ('default' => array ('default' => array ('database' => '$dbname', 'username' => '${u}', 'password' => '${p}','host' => 'localhost', 'port' => '', 'driver' => 'mysql', 'prefix' => '', ), ), );"
  echo $spass | sudo -S sed "s/$old/$new/g" $INSTALL_LOC/web/sites/default/settings.php > $HOME/settings.php.temp
  echo $spass | sudo -S rm $INSTALL_LOC/web/sites/default/settings.php
  echo $spass | sudo -S mv $HOME/settings.php.temp $INSTALL_LOC/web/sites/default/settings.php
}
check_db_connect() {
  err=$(mysql -u "${u}" -p"${p}" -e 'SHOW DATABASES')
  if [ -z "$err" ]; then
    echo "Database connection failed"
    exit 1
  fi
}

#Function to rollback incase of any errors.
# 1 = Check for fail and roll back
# 2 = Simply roll back, or remove drupal instance completely
checkfail_rollback() {
  sudo_password
  flag=$1
  virtualhost=$2
  if [ ! -z "$flag" ] && [ $flag -eq 1 ]; then
    if [ $? -eq 0 ]; then
      echo 'success'
      exit 1
    else
      echo 'fail'
      exit 1
    fi
  elif [ ! -z "$flag" ] && [ $flag -eq 2 ] && [ ! -z  "$virtualhost" ]; then
    echo -e "\nRemoving and disabling virtual host with the name: $virtualhost ..."
    echo $spass | sudo -S a2dissite $virtualhost
    if [ ! -a /etc/hosts.old ]; then
      echo $spass | sudo -S cp /etc/hosts /etc/hosts.old
      awk '!/'"$virtualhost"'/' /etc/hosts > $HOME/hosts.temp
      echo $spass | sudo -S chmod 777 $HOME/hosts.temp
      echo $spass | sudo -S mv $HOME/hosts.temp /etc/hosts
      echo $spass | sudo -S chmod 644 /etc/hosts
    else
      awk '!/'"$virtualhost"'/' /etc/hosts > hosts.temp
      echo $spass | sudo -S chmod 777 $HOME/hosts.temp
      echo $spass | sudo -S mv $HOME/hosts.temp /etc/hosts
      echo $spass | sudo -S chmod 644 /etc/hosts
      echo $spass | sudo -S rm $HOME/hosts.temp
    fi
    temproot=$(grep 'DocumentRoot' /etc/apache2/sites-available/$virtualhost.conf)
    for i in $(echo $temproot | tr " " "\n")
    do
      webroot="$i"
    done
    echo -e "\nDone. \nRemoving database of drupal installation..."
    #Getting path of webroot if the webroot in virtual host is a symlink
    linkdir=$(readlink $webroot)

    pushd $webroot > /dev/null
    #DB password
    #For drush 7 and above
    dbp=$(drush status --show-passwords --format=yaml --pipe | grep 'password')
    if [ ! -z "$dbp" ]; then
      for i in $(echo $dbp | tr ": " "\n")
      do
        dbpass="$i"
      done
    #For drush 6 and below
    else
      dbp=$(drush status --show-passwords --pipe | grep 'password')
      for i in $(echo $dbn | tr "=" "\n")
      do
        dbpass="$i"
      done
    fi
    #Either no drush or drush command failed
    if [ -z "$dbp" ]; then
      echo 'not installed'
    fi

    #DB username
    #For drush 7 and above
    dbu=$(drush status db-username --format=yaml --pipe)
    if [ ! -z "$dbu" ]; then
      for i in $(echo $dbu | tr ": " "\n")
      do
        dbuname="$i"
      done
    #For drush 6 and below
    else
      dbu=$(drush status --pipe | grep 'username')
      for i in $(echo $dbu | tr "=" "\n")
      do
        dbuname="$i"
      done
    fi
    #Either no drush or drush command failed
    if [ -z "$dbu" ]; then
      echo 'not installed'
    fi

    #DB name
    #For drush 7 and above
    dbn=$(drush status db-name --format=yaml --pipe)
    if [ ! -z "$dbn" ]; then
      for i in $(echo $dbn | tr ": " "\n")
      do
        dbname="$i"
      done
    #For drush 6 and below
    else
      dbn=$(drush status --pipe | grep 'username')
      for i in $(echo $dbu | tr "=" "\n")
      do
        dbname="$i"
      done
    fi
    #Either no drush or drush command failed
    if [ -z "$dbn" ]; then
      echo 'drush not installed'
      exit
    fi
    popd > /dev/null
    mysql -u "$dbuname" -p"$dbpass" -e "drop database $dbname"
    echo -e "\nDone. \nRemoving all local files and folders..."
    if [ ! -z $linkdir ]; then
      echo $spass | sudo -S rm -r $linkdir
    fi
    echo $spass | sudo -S rm -r $webroot
    echo $spass | sudo -S rm /etc/apache2/sites-available/"$virtualhost".conf
    echo $spass | sudo -S service apache2 restart
  else
    usage
  fi
  exit 1
}

#Get public_html folder Path
if [ -d $HOME/public_html ]; then
  PUBLIC_HTML="$HOME/public_html"
elif [ ! -d $HOME/public_html ]; then
  mkdir $HOME/public_html
  PUBLIC_HTML="$HOME/public_html"
fi

TEMP=`getopt -o r:u:p:v: -n 'dsup' -- "$@"`
eval set -- "$TEMP"
#Options: -u { mysql username } -p { mysql password } -v {version for new drupal installation} -r {remove drupal instance}
while true ; do
  case "$1" in
    -u)
      case "$2" in
        "")
          usage ; shift 2
          ;;
        *)
          u="$2" ; shift 2
          ;;
      esac ;;
    -p)
      case "$2" in
        "")
          usage ; shift 2
          ;;
        *)
          p=$2 ; shift 2
          ;;
      esac ;;
    -r)
      case "$2" in
        "")
          usage ; shift 2
          ;;
        *)
          r=$2
          checkfail_rollback 2 "$r"; shift 2
          ;;
      esac ;;
    -v)
      case "$2" in
        "")
          usage ; shift 2
          ;;
        *)
          re='^[6-9]$'
          if [[ $2 =~ $re ]]; then
            v=$2
          fi
          shift 2 ;;
      esac ;;
    --) shift ; break ;;
    *)
      usage ;;
  esac
done

#New installation
if [ ! -z "$v" ] && [ ! -z "${u}" ] && [ ! -z "${p}" ] && [ ! -z "$1" ] && [ ! -z "$2" ] && ( [ $# == 2 ] || [ $# == 3 ] ); then
  echo "New Drupal installation"
  dbname="$1"
  vhost="$2"
  if [ ! -z "$3" ]; then
    INSTALL_LOC=$3
  else
    INSTALL_LOC=$PWD
  fi
  #Get sudo password and validate it
  sudo_password
  #Check db connection
  check_db_connect
  # If database doesn't exist
  dbflag=$(mysql -u "${u}" -p"${p}" -e "SHOW DATABASES LIKE '$dbname'")
  if [ -z "$dbflag" ]; then
    mysql -u "${u}" -p"${p}" -e "create database $dbname"
  else
    mysql -u "${u}" -p"${p}" -e "drop database $dbname"
    mysql -u "${u}" -p"${p}" -e "create database $dbname"
  fi
  pushd $INSTALL_LOC > /dev/null
  drush dl -y "drupal-$v" --drupal-project-rename=web
  pushd web > /dev/null
  echo "Installing Drupal $v with user admin and password admin"
  drush si -y --db-url=mysql://"${u}":"${p}"@localhost/"$dbname" --account-pass=admin
  popd
  popd
  echo -e "\nDone. \nWriting settings file..."
  #Use default.settings.php to add database connection details
  write_settings_file

  #Creating symbolic link of folder in public_html
  pushd $PUBLIC_HTML > /dev/null
  ln -s  $INSTALL_LOC/web $vhost
  popd > /dev/null

  create_virtual_host

  echo "New Drupal Virtual host setup complete!"

  exit 1
#Import existing site
elif [ -z "${n}" ] && ( [ ! -z "${u}" ] && [ ! -z "${p}" ] && [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -z "$3" ] && [ ! -z "$4" ] ) && ( [ $# == 4 ] || [ $# == 5 ] ); then
  db="$1"
  dbname="$2"
  vhost="$3"
  repolink="$4"
  if [ ! -z "$5" ]; then
    INSTALL_LOC=$5
  else
    INSTALL_LOC=$PWD
  fi
  #Get sudo password and validate it
  sudo_password
  #Check db connection
  check_db_connect
  # If database doesn't exist
  dbflag=$(mysql -u "${u}" -p"${p}" -e "SHOW DATABASES LIKE '$dbname'")
  if [ -z $dbflag ]; then
    mysql -u "${u}" -p"${p}" -e "create database $dbname"
    echo -e "\nExtracting and importing database. This may take a while..."
    gunzip < "$db" | mysql -u "$u" -p"$p" "$dbname"
  else
    mysql -u "${u}" -p"${p}" -e "drop database $dbname"
    mysql -u "${u}" -p"${p}" -e "create database $dbname"
    echo -e "\nExtracting and importing database. This may take a while..."
    gunzip < "$db" | mysql -u "$u" -p"$p" "$dbname"
  fi

  echo -e "\nCloning git repository..."
  git clone "$repolink" $INSTALL_LOC/web
  if [ "$?" -ne 0 ]; then
    echo "[ERROR] Unable to read from '$repolink'"
    exit 1;
  fi
  echo -e "\nDone. \nWriting settings file..."

  #If settings.php exists
  if [ -f $INSTALL_LOC/web/sites/default/settings.php ]; then
    #Use default.settings.php to add database connection details
    echo $spass | sudo -S cp $INSTALL_LOC/web/sites/default/settings.php $INSTALL_LOC/web/sites/default/settings.php.old
    write_settings_file
  else
    #Use default.settings.php to add database connection details
    write_settings_file
  fi

  #Creating symbolic link of folder in public_html
  pushd $PUBLIC_HTML > /dev/null
  ln -s  $INSTALL_LOC/web $vhost
  popd > /dev/null

  create_virtual_host

  echo "Drupal Virtual host setup complete!"
else
  usage
fi

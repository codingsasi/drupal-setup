#!/bin/bash

# Copyright 2015 Abhai Sasidharan <abhai.sasidharan@zyxware.com>
# Copyright 2015 Anish A <anish.a@zyxware.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo -e "\nUsage: dsup [-u <string>] [-p <string>] [Path/to/database/dump] [database name] [Virtual Host Name] [Link to repo] \nExample: dsup -u dbusername -p dbpassword -v 7 /home/abhai/drupal7.tar.gz dbname drupal7.local git@github.com:someone/drupal7.git\n" 1>&2;
  exit 1; 
}

#Function to rollback incase of any errors.
# 1 = Check for fail and roll back
# 2 = Simply roll back, or remove drupal instance completely
checkfail_rollback() {
  if [ ! -z "$1" ] && [ $1 -eq 1 ]; then
    if [ $? -eq 0 ]; then
      echo 'success'
      exit 1
    else
      echo 'fail'
      exit 1
    fi
  elif [ ! -z "$1" ] && [ $1 -eq 2 ] && [ ! -z "$2" ] && [ ! -z $3 ] && [ ! -z $4 ]; then
    echo $1
    echo $2
    echo $3
    echo $4
    echo 'remove drupal instance'
    a2dissite $2
    if [ ! -a /etc/hosts.old ]; then 
      cp /etc/hosts /etc/hosts.old
      sed -n '/'"$2"'/!p' /etc/hosts > /etc/hosts
    else
      sed -n '/'"$2"'/!p' /etc/hosts > /etc/hosts
    fi
    temproot=$(grep 'DocumentRoot' /etc/apache2/sites-available/test.local.conf)
    for i in $(echo $temproot | tr " " "\n")
    do
      webroot="$i"
    done
    pushd $webroot > /dev/null
    db=$(drush status db-name)
    for i in $(echo $db | tr " : " "\n")
    do
      dbname="$i"
    done
    popd > /dev/null
    mysql -u "$3" -p"$4" -e "drop database $dbname"
    rm -r $webroot
    exit 1
  else  
    echo 'rollback'
    usage
  fi
}

TEMP=`getopt -o r:u:p:n: -n 'dsup' -- "$@"`
eval set -- "$TEMP"
#Options: -u { mysql username } -p { mysql password } -n {version for new drupal installation} -r {remove drupal instance}
while true ; do
  case "$1" in
    -u)
      case "$2" in
        "")
          usage ; shift 2 
          ;;
        *)
          u="$2" ; shift 2 
          ;;
      esac ;;
    -p)
      case "$2" in
        "")
          usage ; shift 2 
          ;;
        *)
          p=$2 ; shift 2 
          ;;
      esac ;;
    -r)
      case "$2" in
        "") 
          usage ; shift 2
          ;;
        *)
          r=$2 ; shift
          u=$3 ; 
          p=$4 ;  
          checkfail_rollback 2 "$r" "$u" "$p" ; shift
          ;;
      esac ;;
    -n)
      case "$2" in
        "")
          usage ; shift 2 
          ;;
        *)
          re='^[6-9]$'
          if [[ $2 =~ $re ]]; then
            n=$2
          fi
          shift 2 ;;
      esac ;;
    --) shift ; break ;;
    *)
      usage ;;
  esac
done

#New installation
if [ ! -z "$n" ] && [ ! -z "${u}" ] && [ ! -z "${p}" ] && [ ! -z "$1" ] && [ ! -z "$2" ] && [ $# == 2 ]; then
  echo "new drupal install"
  exit 1
#Import existing site  
elif [ -z "${n}" ] && ( [ ! -z "${u}" ] && [ ! -z "${p}" ] && [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -z "$3" ] && [ ! -z "$4" ] ) && [ $# == 4 ]; then
  echo "old drupal install"
  # If database doesn't exist
  if [ ! -d /var/lib/mysql/"$2" ]; then
    mysql -u "${u}" -p"${p}" -e "create database $2"
    echo -e "\nExtracting and importing database. This may take a while..."
    gunzip < "$1" | mysql -u "$u" -p"$p" "$2"
  else
    TABLES=$(mysql -u "${u}" -p"${p}" $2 -e 'show tables')
    # If empty database exists
    if [ "$TABLES" == "" ]; then
      echo -e "\nExtracting and importing database. This may take a while..."
      gunzip < "$1" | mysql -u "$u" -p"$p" "$2"
    #If database with same name exists
    else
      mysql -u "${u}" -p"${p}" -e "drop database $2"
      mysql -u "${u}" -p"${p}" -e "create database $2"
      echo -e "\nExtracting and importing database. This may take a while..."
      gunzip < "$1" | mysql -u "$u" -p"$p" "$2"
    fi
  fi

  echo -e "\nCloning git repository..."
  sudo -u $SUDO_USER git clone "$4" web
  echo -e "\nDone. Writing settings file..."

  #If settings.php exists
  if [ -f $PWD/web/sites/default/settings.php ]; then
    #Use default.settings.php to add database connection details
    cp $PWD/web/sites/default/settings.php $PWD/web/sites/default/settings.php.old
    cp $PWD/web/sites/default/default.settings.php $PWD/web/sites/default/settings.php
    old="databases = array();"
    new="databases = array ('default' => array ('default' => array ('database' => '$2', 'username' => '${u}', 'password' => '${p}','host' => 'localhost', 'port' => '', 'driver' => 'mysql', 'prefix' => '', ), ), );"
    sed "s/$old/$new/g" $PWD/web/sites/default/settings.php > $PWD/web/sites/default/settings.php.temp
    rm $PWD/web/sites/default/settings.php
    mv $PWD/web/sites/default/settings.php.temp $PWD/web/sites/default/settings.php
  else
    #Use default.settings.php to add database connection details
    cp $PWD/web/sites/default/default.settings.php $PWD/web/sites/default/settings.php
    old="databases = array();"
    new="databases = array ('default' => array ('default' => array ('database' => '$2', 'username' => '${u}', 'password' => '${p}','host' => 'localhost', 'port' => '', 'driver' => 'mysql', 'prefix' => '', ), ), );"
    sed "s/$old/$new/g" $PWD/web/sites/default/settings.php > $PWD/web/sites/default/settings.php.temp
    rm $PWD/web/sites/default/settings.php
    mv $PWD/web/sites/default/settings.php.temp $PWD/web/sites/default/settings.php
  fi

  echo "Creating virtual host..."
  echo -e "<VirtualHost *:80>
      ServerAdmin webmaster@localhost
      ServerName $3
      DocumentRoot $PWD/web
      <Directory $PWD/web>
    AllowOverride All
    Order allow,deny
    allow from all
    Require all granted
      </Directory>
  </VirtualHost>" > /etc/apache2/sites-available/"$3".conf

  echo -e "127.0.0.1  $3\n$(cat /etc/hosts)" > /etc/hosts
  a2ensite $3
  service apache2 restart

  echo "Drupal Virtual host setup complete!"
else
  echo "usage"
  usage
fi
